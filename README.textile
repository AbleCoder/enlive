h1. The new Enlive

Enlive is a selector-based (Ã  la CSS) templating library for Clojure. 

An Enlive template has two parts: a HTML file and a @deftemplate@ form somewhere in a clj file.

h2. What's wrong with the old Enlive?

Premature optimization. It drove me to write a convoluted and limited system. The new Enlive is more regular, more powerful and easier to reason about.

I made it work (old Enlive), I'm making it right (new Enlive) and I'll make it faster.   

h2. What's new in the new Enlive?

Transformations (the right-hand parts of rules) are now plain old closures. These functions take one arg (the selected node) and return nil, another node or an arbitrarily nested collection of nodes.

Rules are applied top-down: the first rule transforms the whole tree and the resulting tree is passed to the next rules.

Nodes are transformed deep-first, that is: if a selector selects several nodes, descendants are transformed first. Hence, when the transformation is applied to an ancestor, you can "see" the transformed descendants.

<pre>
   /B                                                                             /(T B)
  A    if A and B are selected and transformed by T the the resulting tree is (T A      )
   \C                                                                             \C
</pre>

h2. Templates and snippets

A snippet is a function that returns a seq of nodes, it can be used as a building block for more complex templates.

A template is a function that returns a seq of string -- basically it's a snippet whose output is serialized. Templates return a seq of strings to avoid building the whole string.

Templates and snippets transform a source (specified as a path (to access resources on the classpath), a File, an URI, an URL, an element or a seq of nodes).

h2. Selectors

h3. Syntax

A selector is either a vector or a set of selectors (denoting grouping).

Each element in the vector is either a combinator, a "simple selector":http://www.w3.org/TR/2009/WD-css3-selectors-20090310/#simple-selectors-dfn or a compound selector (union or intersection), here is a summary:

<pre>
  Enlive                           CSS
  =======================================================
  :>                               >
  :*                               *
  :div                             div
  :div#some-id                     div#some-id
  :div.class1.class2               div.class1.class2
  :*#foo.bar                       *#foo.bar
  :#foo.bar                        #foo.bar
  (attr? :href)                    *[href]
  (attr? :href :title)             *[href][title]
  (attr= :href "foo")              *[href=foo]
  (attr= :href "foo" :title "bar") *[href=foo][title=bar]
  [:a.action (attr? :href)]        a.action[href]
  #{:div :p}                       _no equivalent_
</pre>

Some examples:

<pre>
  [:div]                                       div
  [:body :script]                              body script
  #{[:ul.outline :> :li] [:ol.outline :> li]}  ul.outline > li, ol.outline > li 
  [#{:ul.outline :ol.outline} :> :li]          ul.outline > li, ol.outline > li
  [[#{:ul :ol} :.outline] :> :li]              ul.outline > li, ol.outline > li
</pre>

h3. Compilation

At macroexpansion-time in @select@, @snippet@ and @at@ macros, selectors are compiled to code:

<pre>
  net.cgrand.enlive-html=> (compile-selector '[:div])
  (chain descendants-or-self (tag= :div))
  net.cgrand.enlive-html=> (compile-selector '[:body :script])
  (chain descendants-or-self (tag= :body) descendants-or-self (tag= :script))
  net.cgrand.enlive-html=> (compile-selector '[#{:ul.outline :ol.outline} :> :li])
  (chain descendants-or-self (union (intersection (tag= :ol) (has-class "outline")) (intersection (tag= :ul) (has-class "outline"))) (tag= :li))
  net.cgrand.enlive-html=> (compile-selector '[[:div (attr= :title "foobar")]])
  (chain descendants-or-self (intersection (tag= :div) (attr= :title "foobar")))
</pre> 